#!/usr/bin/env python

import argparse
import subprocess
import glob
import os
import urllib.request, urllib.error
from bs4 import BeautifulSoup

problems_dir = '/usr/src/app/problems'

def main():
    choices = ['create', 'test']
    parser = argparse.ArgumentParser(description='プロジェクトの作成・テストケースの実行')
    parser.add_argument('command', choices=choices, help='実行するコマンド')
    parser.add_argument('-p', '--problem_dir', help='対象の問題ディレクトリ名')
    parser.add_argument('-g', '--get_samples', help='問題のサンプルを取得する(任意)', action='store_true')

    args = parser.parse_args()
    if args.command == 'create':
        create_project(args.problem_dir, args.get_samples)
    elif args.command == 'test':
        exec_test(args.problem_dir)
    else:
        parser.print_help()

def create_project(problem_dir_path, is_get_samples):
    """
    プロジェクトのテンプレート作成
    """
    # バリデーション
    if problem_dir_path is None:
        print('プロジェクトのディレクトリを指定してください')
        exit(1)
    task_url = None
    if is_get_samples:
        contest_name = problem_dir_path.split('_')[0]
        task_url = 'https://atcoder.jp/contests/{}/tasks/{}'.format(contest_name, problem_dir_path)
    samples = get_samples(task_url)
    # 生成するテストケース数
    try:
        # ディレクトリ作成
        problem_dir_full_path = '{}/{}'.format(problems_dir, problem_dir_path)
        os.makedirs(problem_dir_full_path)
        # 問題とテストケースのファイルを作成
        with open('{}/main.py'.format(problem_dir_full_path), 'w') as file:
            pass
        for i, sample in enumerate(samples):
            with open('{}/{}.in'.format(problem_dir_full_path, str(i + 1).zfill(2)), 'w') as file:
                file.write(sample['input'])
            with open('{}/{}.out'.format(problem_dir_full_path, str(i + 1).zfill(2)), 'w') as file:
                file.write(sample['output'])
        print('プロジェクトを作成しました')
    except FileExistsError:
        print('指定されたディレクトリはすでに存在します')

def get_samples(task_url):
    if task_url is None:
        return [{ 'input': '', 'output': '' }]
    html = urllib.request.urlopen(url = task_url)
    soup = BeautifulSoup(html, 'html.parser')
    pres = soup.find_all('pre')
    samples = []
    for n in range(1, len(pres) // 2 - 1, 2):
        i = pres[n].string.replace('\r', '')
        o = pres[n + 1].string.replace('\r', '')
        samples.append({ 'input': i, 'output': o })
    return samples

def exec_test(problem_dir_path):
    """
    テストケースの実行
    """
    problem_dir_full_path = '{}/{}'.format(problems_dir, problem_dir_path)

    input_file_paths = sorted(glob.glob('{}/*.in'.format(problem_dir_full_path)))
    problem_file_path = glob.glob('{}/*.py'.format(problem_dir_full_path))[0]
    wrong_cases = []

    if len(input_file_paths) == 0:
        print('テストケースがありません')
        exit(0)

    for input_file_path in input_file_paths:
        command = 'cat {} | python {}'.format(input_file_path, problem_file_path)

        result = subprocess.check_output(command, shell=True)
        result_lines = result.decode('utf-8').strip().split("\n")

        output_file_path = input_file_path.replace('.in', '.out')

        answer = subprocess.check_output('cat {}'.format(output_file_path), shell=True)
        answer_lines = answer.decode('utf-8').strip().split("\n")

        is_correct = check(input_file_path, output_file_path, result_lines, answer_lines)
        if is_correct:
            print_color('.', pycolor.GREEN, newline=False)
        else:
            wrong_cases.append({
                'input_file_path': input_file_path,
                'results': result_lines,
                'answers': answer_lines
            })
            print_color('F', pycolor.RED, newline=False)

    print('')
    print('')
    if len(wrong_cases) == 0:
        print_color('All test cases are passed.', pycolor.GREEN)
    else:
        print_color('Failures:', pycolor.RED)
        for wc in wrong_cases:
            print_wrong_answer(wc['input_file_path'], wc['results'], wc['answers'])


def check(input_file_path, output_file_path, results, answers):
    """
    正解か判定
    """
    if len(results) != len(answers):
        return False

    for i in range(len(results)):
        if results[i] != answers[i]:
            return False

    return True


def print_wrong_answer(input_file_path, results, answers):
    """
    失敗したテストケースの表示
    """
    print('')
    print_color('  Test case: ' + input_file_path, pycolor.RED)
    print_color('    expected:', pycolor.RED)
    for answer in answers:
        print_color('      ' + answer, pycolor.RED)
    print_color('    got:', pycolor.RED)
    for result in results:
        print_color('      ' + result, pycolor.RED)


def print_color(msg, color, newline = True):
    """
    色付きのprint
    """
    end = '\n' if newline else ''
    print(color + msg + pycolor.END, end=end)


# ref. https://qiita.com/ironguy/items/8fb3ddadb3c4c986496d
class pycolor:
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    PURPLE = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    END = '\033[0m'
    BOLD = '\038[1m'
    UNDERLINE = '\033[4m'
    INVISIBLE = '\033[08m'
    REVERCE = '\033[07m'

main()
